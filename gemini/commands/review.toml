description = "Performs comprehensive code review of staged changes focusing on best practices, SOLID principles, and code quality"

prompt = """
Please perform a thorough code review of the staged changes in the current git repository.

## Analysis Context
First, examine the staged changes using: git diff --cached

## Review Focus Areas
Analyze the code changes for:

### 1. Code Quality & Best Practices
- Code readability and clarity
- Naming conventions (variables, functions, classes)
- Code organization and structure
- Proper error handling
- Resource management (memory, file handles, etc.)

### 2. SOLID Principles
- **Single Responsibility**: Each class/function has one reason to change
- **Open/Closed**: Open for extension, closed for modification  
- **Liskov Substitution**: Subtypes must be substitutable for base types
- **Interface Segregation**: Many specific interfaces better than one general
- **Dependency Inversion**: Depend on abstractions, not concretions

### 3. Design Patterns & Architecture
- Appropriate use of design patterns
- Separation of concerns
- Coupling and cohesion
- Abstraction levels
- Code reusability

### 4. Performance & Security
- Potential performance bottlenecks
- Security vulnerabilities or concerns
- Resource optimization opportunities
- Algorithmic efficiency

### 5. Testing & Maintainability
- Testability of the code
- Documentation and comments quality
- Code complexity and maintainability
- Potential technical debt

## Output Format
Provide your review in this structured format:

### üéØ Overall Assessment
Brief summary of the code quality and main observations.

### ‚úÖ Strengths
What's done well in the code changes.

### ‚ö†Ô∏è Issues Found
List specific issues with:
- File and line references where possible
- Severity level (Critical/High/Medium/Low)
- Clear explanation of the problem

### üí° Recommendations
Specific, actionable improvements with:
- Code examples where helpful
- Priority level for each suggestion
- Rationale for the recommendation

### üîß Refactoring Opportunities
Specific areas where code could be refactored for better:
- Readability
- Performance
- Maintainability
- SOLID compliance

Focus on being constructive and educational. Explain the "why" behind your suggestions to help improve coding skills.
"""